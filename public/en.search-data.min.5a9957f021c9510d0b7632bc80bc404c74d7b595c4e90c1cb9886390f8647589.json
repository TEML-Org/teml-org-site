[{"id":0,"href":"/docs/example/","title":"TEML Specificication","section":"Docs","content":" TEML Language Specification # Overview # The Textual Event Modeling Language (TEML) is a standardized textual representation for defining Event Models. Its purpose is to improve accessibility, streamline input and maintenance, and provide a common format for tooling and version control.\nThis specification defines the syntax, semantics, and structural conventions for writing a valid TEML document.\nDocument Structure # A TEML document is written in YAML and is structured as follows:\napiVersion: \u0026lt;string\u0026gt; metadata: name: \u0026lt;string\u0026gt; aggs: - \u0026lt;aggregate_definition\u0026gt; views: - \u0026lt;view_definition\u0026gt; slices: - \u0026lt;slice_definition\u0026gt; apiVersion # Specifies the version of the TEML specification being used.\nType: String Example: teml.org/v001 metadata # Provides metadata about the model.\nType: Object name: The name of the model. Example: metadata: name: sample Aggregates (aggs) # Defines the aggregates in the system. Aggregates are reusable components that encapsulate domain logic.\nSyntax # aggs: - \u0026amp;\u0026lt;aggregate_name\u0026gt; \u0026lt;property\u0026gt;: \u0026lt;type\u0026gt; Properties # Each aggregate defines a list of properties. Each property must have a name and type.\nTypes: g: Globally unique identifier (GUID). s: String. int: Integer. Other types may be added as necessary. Example # aggs: - \u0026amp;User id: g firstName: s lastName: s Views (views) # Defines the read models (views) in the system. Views represent projections of data for querying or presentation.\nSyntax # views: - \u0026lt;view_name\u0026gt;: \u0026amp;\u0026lt;view_reference\u0026gt; \u0026lt;property\u0026gt;: \u0026lt;type\u0026gt; Example # views: - UserView: \u0026amp;UserView id: g firstName: s lastName: s Slices (slices) # Defines the commands and events within the Event Model. Each slice represents a discrete unit of behavior, consisting of:\nAggregate reference (agg) Command definition (command) Event definition (event) Associated views (views) Optional metadata (story, status) Syntax # slices: - \u0026lt;slice_name\u0026gt;: agg: *\u0026lt;aggregate_reference\u0026gt; command: name: \u0026lt;string\u0026gt; event: name: \u0026lt;string\u0026gt; props: \u0026lt;property\u0026gt;: \u0026lt;type\u0026gt; views: - \u0026lt;\u0026lt;: *\u0026lt;view_reference\u0026gt; \u0026lt;overrides\u0026gt; Properties # agg: References an aggregate defined in aggs. Uses YAML anchors (* syntax). command: Defines the command associated with the slice. If omitted, it defaults to the slice name. name: Name of the command. event: Defines the event produced by the command. name: Name of the event (usually in the past tense of the command). props: Properties of the event, with names and types. views: A list of view references, with optional property overrides. story (optional): URL or identifier for further context. status (optional): Status of the slice (e.g., InDev, Completed). Example # slices: - AddUser: agg: *User command: name: AddUser event: name: AddedUser props: id: g firstName: s lastName: s views: - *UserView - RenameUser: agg: *User event: name: RenamedUser props: id: g firstName: s lastName: s views: - \u0026lt;\u0026lt;: *UserView id: x firstName: x - ReAgeUser: story: \u0026#39;https://www.example.com/12345\u0026#39; status: InDev agg: *User event: name: ReAgedUser props: id: g age: int views: - \u0026lt;\u0026lt;: *UserView id: x age: int Anchors and References # TEML makes use of YAML anchors (\u0026amp;) and references (*) for reusable components such as aggregates and views.\nAnchor (\u0026amp;): Declares a reusable component. Reference (*): References a declared anchor. Example:\naggs: - \u0026amp;User id: g firstName: s lastName: s slices: - AddUser: agg: *User Metadata Fields # story # Type: String (URL or identifier) Description: Provides context or links to related documentation. Example: story: 'https://www.example.com/12345' status # Type: Enum Allowed Values: InDev, Completed, or custom statuses. Description: Indicates the current state of the slice. Example: status: InDev Summary # TEML provides a concise and standardized way to represent Event Models in a plain-text format. By leveraging YAML, it allows for easy reuse of components, accessibility, and integration with tooling. The specification will evolve to include additional features and constructs as required.\n"},{"id":1,"href":"/posts/day-one-of-teml/","title":"Day One of TEML.org","section":"Blog","content":"Today is 2024-12-29. I decided that no one was going to come around and give me permission to standardize a textual language for the event moddeling process, and I could wait forevery for someone else to do it. I think that means I should just get started.\nI\u0026rsquo;ve started this website. I\u0026rsquo;ve created a new organization on Github with a repo for my documentation notes.\nThe project will be open source under the Apache 2.0 License. I would love some help with this, but I also would love it to say so simple that it doesn\u0026rsquo;t require much work.\nIf you have any experience defining a language spec I\u0026rsquo;d love some advice and help.\nIf you think you have something to contribute, please submit a PR to the repo.\nAnyway, this is how the project started today.\n"}]